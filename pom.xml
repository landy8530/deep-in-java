<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>org.landy</groupId>
    <artifactId>deep-in-java</artifactId>
    <packaging>pom</packaging>
    <version>1.0-SNAPSHOT</version>
    <modules>
        <module>concurrency</module>
    </modules>

    <properties>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
        <java.home>${JAVA_HOME}</java.home>
        <java.version>${JAVA_VERSION}</java.version>
        <maven.compiler.source>${JAVA_VERSION}</maven.compiler.source>
        <maven.compiler.target>${JAVA_VERSION}</maven.compiler.target>
    </properties>

    <build>
        <!--pluginmanagement标签一般用在父pom中，子元素可以包含plugins插件-->
        <pluginManagement>
            <plugins>
                <!-- 一个好习惯，就是在此配置JDK的版本，这样就可以方便代码迁移 By Landy 2019.01.04-->
                <!--一般而言，target与source是保持一致的。但是，有时候为了让程序能在其他版本的jdk中运行(对于低版本目标jdk，源代码中需要没有使用低版本jdk中不支持的语法)，会存在target不同于source的情况 。-->
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-compiler-plugin</artifactId>
                    <version>3.7.0</version>
                    <configuration>
                        <source>${maven.compiler.source}</source> <!-- 源代码使用的开发版本 -->
                        <target>${maven.compiler.target}</target> <!-- 需要生成的目标class文件的编译版本 -->
                        <!-- 这下面的是可选项 -->
                        <meminitial>128m</meminitial>
                        <maxmem>512m</maxmem>
                        <fork>true</fork> <!-- fork is enable,用于明确表示编译版本配置的可用 -->
                        <compilerVersion>${java.version}</compilerVersion>
                        <!-- 这个选项用来传递编译器自身不包含但是却支持的参数选项 -->
                        <!--<compilerArgument>-verbose -bootclasspath ${java.home}\lib\rt.jar</compilerArgument>-->
                        <executable>${java.home}/bin/javac</executable>
                    </configuration>
                </plugin>
            </plugins>
        </pluginManagement>
    </build>
</project>